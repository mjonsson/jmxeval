= Table of Contents =

<wiki:toc max_depth="2" />

= Introduction =

*jmxeval* is a plugin for Nagios/NRPE which can query JMX attributes or return values of JMX operations

= Setting Up =

== With Nagios/NRPE ==

To setup *jmxeval* with your Nagios/NRPE setup,
  # Download the latest version's zip file
  # Unpack the zip file
  # Place the following files from the zip file to `libexec` directory under Nagios directory, or any other location you prefer to place Nagios plugins
   * `jmxeval-<version>.jar`
   * `check_jmxeval` (for linux or any unix based platforms)
   * `check_jmxeval.bat` (for windows)
  # Ensure `JAVA_HOME` environment property is set to a valid Java installation, or change the `check_jmxeval` / `check_jmxeval.bat` to set the `JAVA_HOME` value
  # Run the following command to make sure setup is complete

*On Linux (or other unix based platforms)*
{{{
<nagios-dir>/libexec/check_jmxeval
}}}

*On Windows*
{{{
<nagios-dir>/libexec/check_jmxeval.bat
}}}

This should print the following on the screen.

{{{
Syntax: check_jmxeval <filename> [--validate=true [--schema=x.x]]
}}}

== As a standalone tool ==

To setup *jmxeval* with your Nagios/NRPE setup,
  # Download the latest version's zip file
  # Unpack the zip file
  # Ensure `JAVA_HOME` environment property is set to a valid Java installation, or change the `check_jmxeval` / `check_jmxeval.bat` to set the `JAVA_HOME` value
  # Run the following command to make sure setup is complete

*On Linux (or other unix based platforms)*
{{{
<nagios-dir>/libexec/check_jmxeval
}}}

*On Windows*
{{{
<nagios-dir>/libexec/check_jmxeval.bat
}}}

This should print the following on the screen.

{{{
Syntax: check_jmxeval <filename> [--validate=true [--schema=x.x]]
}}}

= Configuring JMX =

To query with *jmxeval*, you will have to ensure that the Java process that you intend to query has JMX enabled. If its already configured, you can skip this section of the document, otherwise you can setup JMX on any Java processes (Java 1.5+) as stated in the following link.

http://docs.oracle.com/javase/1.5.0/docs/guide/management/agent.html#jmxagent

Make sure that you refer the correct version of documentation to determine how to enable JMX, as they could be different, specially if you are still using Java 1.4 which does not support JMX out-of-the-box.

Additionally, you can refer documentation related your tomcat, spring framework, etc. to determine other ways enabling JMX and exposing more useful information related to the application.

= Your first jmxeval check configuration =

Before getting in to details about all the checks that *jmxeval* can perform, lets start with a simple check which checks for the current thread count in a Java process.

This check will include,
  # Initiating a JMX connection to a JMX enabled Java process, by authenticating itself with a given username and a password (without SSL)
  # Querying the `ThreadCount` on the `java.lang:type=Threading` MBean
  # Checking if the thread count is in the expected range
  # Including the thread count in performance data which Nagios could use to produce history graphs

To perform this check, first you will need to make sure that you have configuration file that instructs *jmxeval* to perform this check. Following is a sample configuration file you could use for this.

{{{
<?xml version="1.0"?>
<jmxeval:jmxeval xmlns:jmxeval="http://www.adahas.com/schema/jmxeval-1.2" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <!--
    connect to Java process running on 'localhost' having JMX agent exposed on port '9010'
    using username 'myUser' and password 'myPassword'
   -->
  <connection url="service:jmx:rmi:///jndi/rmi://localhost:9010/jmxrmi" 
      username="myUser" password="myPassword">
      
    <!-- 
      define a JMX check to evaluate the thread count of the process named as 'Threads'
     -->
    <eval name="Threads">
    
      <!-- 
        query the JMX connection to get the attribute 'ThreadCount' from the JMX bean with object name
        'java.lang:type=Threading' and assign the retrieved value to a variable named 'threadCount'
       -->
      <query var="threadCount" objectName="java.lang:type=Threading" attribute="ThreadCount" />
      
      <!--
        perform a check using the 'threadCount' variable to see if the value of the variable is
        in the expected range.
        
        if the value is equals to or is over 30 the check will result in a warning status, where as if the
        value is equals to or is over 40 the check will result in critical status.
        
        the message displayed with the plugin output would be 'ThreadCount is ${threadCount}' where the
        '${threadCount}' would be replaced with the value of the variable.
       -->
      <check useVar="threadCount" warning="30" critical="40" message="ThreadCount is ${threadCount}">
      
        <!-- 
          the variable used in this check, in this instance 'threadCount', will be included in the
          performance data produced from the plugin output.  
         -->
        <perf />
      </check>
    </eval>
  </connection>
</jmxeval:jmxeval>
}}}

To get started, copy the content from the above sample, and place it in an `<nagios-dir>/etc/jmxeval-threadcount.xml` or any other location you prefer.

Then make sure that you have a JMX enabled Java process is running on your computer (or any other computer that is accessible from yours), and the XML file is updated with the proper `url`, `username` and `password` for the `connection`. Also make sure that the `java.lang:type=Threading` MBean is exposed (usually its exposed on all Java processes) using JConsole or VisualVM, and if its not available, update the `objectName` and `attribute` to reflect another MBean that is available.

Now to test if the *jmxeval* check works, execute the following command.

{{{
<nagios-dir>/libexec/check_jmxeval <nagios-dir>/etc/jmxeval-threadcount.xml
}}}

And it was successful, it should give a output similar to,

{{{
JMXEval Threads OK - ThreadCount is 23 | threadCount=23;30;40 time=0.0s
}}}
